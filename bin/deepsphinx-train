#!/usr/bin/env python
# vim: filetype=python

'''Script for training the model'''
import time
import os
import tensorflow as tf
from deepsphinx.seq2seq_model import seq2seq_model
from deepsphinx.data import read_data_queue, get_speaker_stats
from deepsphinx.vocab import VOCAB
from deepsphinx.utils import edit_distance, FLAGS
from deepsphinx.flags import load_flags
try:
    import pywrapfst as fst
except ImportError:
    pass
import numpy as np

def run_eval(graph,
             queue,
             predictions,
             outputs,
             output_lengths,
             step,
             cost,
             keep_prob_tensor,
             mean_speaker,
             var_speaker,
             pred_scores,
             lm_fst,
             noise_std):
    '''Evaluate with eval dataset'''

    tf.logging.info('Evaluation started')
    with graph.as_default():
        writer = tf.summary.FileWriter(FLAGS.job_dir)
        tf.Session.reset(None, ['queue'])
        with tf.Session() as sess:
            tf.train.Saver().restore(sess, FLAGS.checkpoint_path)
            read_data_queue('eval',
                            queue,
                            sess,
                            mean_speaker,
                            var_speaker,
                            lm_fst)
            tot_wedit = 0.0
            tot_cedit = 0.0
            batch_loss = 0.0
            tot_evw = 0
            tot_evc = 0
            tot_bat = 0
            coord = tf.train.Coordinator(
                clean_stop_exception_types=(
                    tf.errors.CancelledError,
                    tf.errors.OutOfRangeError))

            with coord.stop_on_exception():
                while not coord.should_stop():
                    pred, _, out, out_len, loss = sess.run(
                        [predictions, pred_scores, outputs, output_lengths, cost],
                        feed_dict={noise_std:0.0, keep_prob_tensor: 1.0})
                    tot_bat += 1
                    batch_loss += loss
                    for i in range(pred.shape[0]):
                        real_out = ''.join([VOCAB[l]
                                            for l in out[i, :out_len[i] - 1]])
                        pred_out = ''.join([VOCAB[l]
                                            for l in pred[i, :, 0]])
                        pred_out = pred_out.split('<')[0]
                        tot_wedit += edit_distance(real_out.split(), pred_out.split()) * 100.0
                        tot_cedit += edit_distance(list(real_out), list(pred_out)) * 100.0
                        tot_evw += len(real_out.split())
                        tot_evc += len(list(real_out))
                        tf.logging.info('{}'.format(real_out))
                        tf.logging.info('{} : {} / {}'.format(pred_out, tot_wedit, tot_evw))

            if tot_evw > 0:
                tf.logging.info('WER: {}, CER: {}'.format(
                    tot_wedit / tot_evw, tot_cedit / tot_evc))
                summary = tf.Summary(
                    value=[tf.Summary.Value(tag='WER_valid', simple_value=tot_wedit / tot_evw),
                           tf.Summary.Value(tag='CER_valid', simple_value=tot_cedit / tot_evc),
                           tf.Summary.Value(tag='loss_valid', simple_value=batch_loss / tot_bat)
                          ])
                writer.add_summary(summary, global_step=sess.run(step))
                writer.flush()
            coord.request_stop()
    tf.logging.info('Evaluation finished')


def train():
    '''Train the model and evaluate at every epoch'''

    checkpoint = os.path.join(FLAGS.job_dir, 'checkpoints/')

    if FLAGS.eval_only:
        sets = ['eval']
    else:
        sets = ['eval', 'train']

    if FLAGS.use_train_lm or FLAGS.use_inference_lm:
        lm_fst = fst.Fst.read_from_string(tf.gfile.FastGFile(FLAGS.fst_path, 'rb').read())
    else:
        lm_fst = None

    graph = tf.Graph()
    with graph.as_default():
        learning_rate_tensor = tf.placeholder(
            tf.float32,
            shape=[],
            name='learning_rate')
        keep_prob_tensor = tf.placeholder(
            tf.float32,
            shape=[],
            name='keep_prob')
        noise_std = tf.placeholder(
            tf.float32,
            shape=[],
            name='noise_std')
        # https://stackoverflow.com/questions/39204335/can-a-tensorflow-queue-be-reopened-after-it-is-closed
        with tf.container('queue'):
            queue = tf.PaddingFIFOQueue(
                capacity=64,
                dtypes=['float32', 'int32', 'int32', 'int32'],
                shapes=[[None, FLAGS.nfilt * 3 + 1], [], [None], []],
                name='feed_queue')
            inputs, input_lengths, outputs, output_lengths = queue.dequeue_many(
                FLAGS.batch_size)

        training_logits, predictions, train_op, cost, step, pred_scores = seq2seq_model(
            inputs,
            outputs,
            input_lengths,
            output_lengths,
            lm_fst,
            1.0, #keep_prob_tensor,
            noise_std)

        writer = tf.summary.FileWriter(FLAGS.job_dir)
        saver = tf.train.Saver()
        batch_loss = 0.0
        writer.add_graph(graph)

        mean_speaker, var_speaker = get_speaker_stats(sets)
        tf.logging.info('Starting training')
        # tf.logging.info('{}'.format(tf.trainable_variables()))
        tf.logging.info('Number of trainable variables: {}'.format(np.sum([np.prod(v.shape) for v in tf.trainable_variables()])))
        train_i = -1

        for epoch_i in range(1, FLAGS.num_epochs + 1):
            if (FLAGS.checkpoint_path is not None):
                run_eval(graph,
                         queue,
                         predictions,
                         outputs,
                         output_lengths,
                         step,
                         cost,
                         keep_prob_tensor,
                         mean_speaker,
                         var_speaker,
                         pred_scores,
                         lm_fst,
                         noise_std)
            if FLAGS.eval_only:
                break
            tf.Session.reset(None, ['queue'])
            with tf.Session() as sess:
                coord = tf.train.Coordinator(
                    clean_stop_exception_types=(
                        tf.errors.CancelledError,
                        tf.errors.OutOfRangeError))
                if (FLAGS.checkpoint_path is None):
                    sess.run(tf.global_variables_initializer())
                    sess.run(tf.local_variables_initializer())
                else:
                    saver.restore(sess, FLAGS.checkpoint_path)

                read_data_queue('train',
                                queue,
                                sess,
                                mean_speaker,
                                var_speaker,
                                lm_fst)

                batch_i = sess.run(step)
                start_time = time.time()
                with coord.stop_on_exception():
                    while not coord.should_stop():

                        lr = FLAGS.learning_rate * pow(FLAGS.learning_rate_decay, batch_i)

                        loss, _, batch_i = sess.run(
                            [cost, train_op, step],
                            feed_dict={learning_rate_tensor: lr,
                                       noise_std: 0.075,
                                       keep_prob_tensor: FLAGS.keep_prob})
                        train_i += 1
                        #tf.logging.info('Loss: {}'.format(loss))

                        batch_loss += loss

                        if (train_i + 1) % FLAGS.display_step == 0:

                            batch_time = time.time()- start_time

                            tf.logging.info('Epoch {:>3}/{} Batch {:>4} - Loss: {:>6.3f}, Seconds: {:>4.2f}'
                                            .format(epoch_i,
                                                    FLAGS.num_epochs,
                                                    batch_i,
                                                    batch_loss / FLAGS.display_step,
                                                    batch_time / FLAGS.display_step))
                            tot_wedit = 0.0
                            tot_cedit = 0.0
                            tot_evw = 0
                            tot_evc = 0

                            #run_options = tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE)
                            #run_metadata = tf.RunMetadata()
                            #loss, _, batch_i = sess.run(
                            #    [cost, train_op, step],
                            #    feed_dict={learning_rate_tensor: lr,
                            #               keep_prob_tensor: FLAGS.keep_prob},
                            #    options=run_options,
                            #    run_metadata=run_metadata)
                            #writer.add_run_metadata(run_metadata, 'step%d' % batch_i)

                            pred, out, out_len = sess.run(
                                [predictions, outputs, output_lengths],
                                feed_dict={noise_std: 0.0, keep_prob_tensor: 1.0})
                            for i in range(pred.shape[0]):
                                real_out = ''.join(
                                    [VOCAB[l] for l in out[i, :out_len[i] - 1]])
                                pred_out = ''.join([VOCAB[l]
                                                    for l in pred[i, :, 0]])
                                pred_out = pred_out.split('<')[0]
                                tot_wedit += edit_distance(real_out.split(),
                                               pred_out.split()) * 100.0
                                tot_cedit += edit_distance(list(real_out), list(pred_out)) * 100.0
                                tot_evw += len(real_out.split())
                                tot_evc += len(list(real_out))
                            tf.logging.info(
                                'Sample real output: {}'.format(real_out))
                            tf.logging.info(
                                'Sample predicted output: {}'.format(pred_out))
                            tf.logging.info('WER: {}, CER: {}'.format(
                                tot_wedit / tot_evw, tot_cedit / tot_evc))
                            summary = tf.Summary(
                                value=[tf.Summary.Value(
                                    tag='WER', simple_value=tot_wedit / tot_evw),
                                       tf.Summary.Value(
                                           tag='CER', simple_value=tot_cedit / tot_evc),
                                       tf.Summary.Value(
                                           tag='loss',
                                           simple_value=batch_loss / FLAGS.display_step)
                                      ])
                            writer.add_summary(summary, global_step=batch_i)
                            writer.flush()
                            batch_loss = 0.0
                            start_time = time.time()

                tf.logging.info('Epoch completed, saving')
                FLAGS.checkpoint_path = saver.save(
                    sess, checkpoint + 'batch', step)

                coord.request_stop()


if __name__ == '__main__':
    tf.logging.set_verbosity(tf.logging.INFO)
    load_flags()
    unparsed = tf.flags.FLAGS._parse_flags()
    if unparsed:
        tf.logging.info('Unparsed flags: {}'.format(unparsed))
    train()
